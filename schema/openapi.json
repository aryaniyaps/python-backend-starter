{"openapi": "3.1.0", "info": {"title": "Starter HTTP API", "version": "0.0.1"}, "paths": {"/health/": {"get": {"tags": ["health"], "summary": "Check the health status of the application.", "description": "Provides information about the health status of the application.", "operationId": "OpenAPITag.HEALTH-check_health", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HealthCheckResult"}}}}, "429": {"description": "Rate Limit Exceeded Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RateLimitExceededErrorResult"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UnexpectedErrorResult"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ValidationErrorResult"}}}}}}}, "/users/@me": {"get": {"tags": ["users"], "summary": "Get the current user.", "description": "Get the current user.", "operationId": "OpenAPITag.USERS-get_current_user", "security": [{"APIKeyHeader": []}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserSchema"}}}}, "429": {"description": "Rate Limit Exceeded Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RateLimitExceededErrorResult"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UnexpectedErrorResult"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ValidationErrorResult"}}}}}}, "patch": {"tags": ["users"], "summary": "Update the current user.", "description": "Update the current user.", "operationId": "OpenAPITag.USERS-update_current_user", "security": [{"APIKeyHeader": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateUserInput"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserSchema"}}}}, "429": {"description": "Rate Limit Exceeded Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RateLimitExceededErrorResult"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UnexpectedErrorResult"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ValidationErrorResult"}}}}, "400": {"description": "Invalid Input Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InvalidInputErrorResult"}}}}}}}, "/users/@me/email-change-request": {"post": {"tags": ["users"], "summary": "Send an email change request.", "description": "Send an email change request.", "operationId": "OpenAPITag.USERS-request_current_user_email_change", "security": [{"APIKeyHeader": []}], "parameters": [{"name": "user-agent", "in": "header", "required": true, "schema": {"type": "string", "title": "User-Agent"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeUserEmailRequestInput"}}}}, "responses": {"202": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "429": {"description": "Rate Limit Exceeded Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RateLimitExceededErrorResult"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UnexpectedErrorResult"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ValidationErrorResult"}}}}, "400": {"description": "Invalid Input Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InvalidInputErrorResult"}}}}}}}, "/users/@me/email": {"patch": {"tags": ["users"], "summary": "Change the current user's email.", "description": "Change the current user's email.", "operationId": "OpenAPITag.USERS-change_current_user_email", "security": [{"APIKeyHeader": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeUserEmailInput"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserSchema"}}}}, "429": {"description": "Rate Limit Exceeded Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RateLimitExceededErrorResult"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UnexpectedErrorResult"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ValidationErrorResult"}}}}, "400": {"description": "Invalid Input Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InvalidInputErrorResult"}}}}}}}, "/users/{user_id}": {"get": {"tags": ["users"], "summary": "Get the user with the given ID.", "description": "Get the user with the given ID.", "operationId": "OpenAPITag.USERS-get_user", "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "The ID of the user to get."}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PartialUserSchema"}}}}, "429": {"description": "Rate Limit Exceeded Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RateLimitExceededErrorResult"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UnexpectedErrorResult"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ValidationErrorResult"}}}}, "404": {"description": "Resource Not Found Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ResourceNotFoundErrorResult"}}}}}}}, "/auth/register/flow/start": {"post": {"tags": ["authentication"], "summary": "Start a register flow.", "description": "Start a register flow.", "operationId": "OpenAPITag.AUTHENTICATION-start_register_flow", "parameters": [{"name": "user-agent", "in": "header", "required": true, "schema": {"type": "string", "title": "User-Agent"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RegisterFlowStartInput"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RegisterFlowStartResult"}}}}, "429": {"description": "Rate Limit Exceeded Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RateLimitExceededErrorResult"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UnexpectedErrorResult"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ValidationErrorResult"}}}}, "400": {"description": "Invalid Input Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InvalidInputErrorResult"}}}}}}}, "/auth/register/flow/verify": {"post": {"tags": ["authentication"], "summary": "Verify a register flow.", "description": "Verify a register flow.", "operationId": "OpenAPITag.AUTHENTICATION-verify_register_flow", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RegisterFlowVerifyInput"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RegisterFlowVerifyResult"}}}}, "429": {"description": "Rate Limit Exceeded Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RateLimitExceededErrorResult"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UnexpectedErrorResult"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ValidationErrorResult"}}}}, "400": {"description": "Invalid Input Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InvalidInputErrorResult"}}}}}}}, "/auth/register/flow/webauthn-start": {"post": {"tags": ["authentication"], "summary": "Start the webauthn registration in the register flow.", "description": "Start the webauthn registration in the register flow.", "operationId": "OpenAPITag.AUTHENTICATION-start_webauthn_register_flow", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RegisterFlowWebAuthnStartInput"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PublicKeyCredentialCreationOptions"}}}}, "429": {"description": "Rate Limit Exceeded Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RateLimitExceededErrorResult"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UnexpectedErrorResult"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ValidationErrorResult"}}}}, "400": {"description": "Invalid Input Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InvalidInputErrorResult"}}}}}}}, "/auth/register/flow/webauthn-finish": {"post": {"tags": ["authentication"], "summary": "Finish the webauthn registration in the register flow.", "description": "Finish the webauthn registration in the register flow.", "operationId": "OpenAPITag.AUTHENTICATION-finish_webauthn_register_flow", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RegisterFlowWebAuthnFinishInput"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RegisterFlowWebAuthnFinishResult"}}}}, "429": {"description": "Rate Limit Exceeded Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RateLimitExceededErrorResult"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UnexpectedErrorResult"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ValidationErrorResult"}}}}, "400": {"description": "Invalid Input Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InvalidInputErrorResult"}}}}}}}, "/auth/login/start": {"post": {"tags": ["authentication"], "summary": "Login Options", "description": "Generate options for retrieving a credential.", "operationId": "OpenAPITag.AUTHENTICATION-login_options", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LoginOptionsInput"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PublicKeyCredentialRequestOptions"}}}}, "429": {"description": "Rate Limit Exceeded Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RateLimitExceededErrorResult"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UnexpectedErrorResult"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ValidationErrorResult"}}}}}}}, "/auth/login/finish": {"post": {"tags": ["authentication"], "summary": "Login Verification", "description": "Verify the authenticator's response for login.", "operationId": "OpenAPITag.AUTHENTICATION-login_verification", "parameters": [{"name": "user-agent", "in": "header", "required": true, "schema": {"type": "string", "title": "User-Agent"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LoginVerificationInput"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthenticateUserResult"}}}}, "429": {"description": "Rate Limit Exceeded Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RateLimitExceededErrorResult"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UnexpectedErrorResult"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ValidationErrorResult"}}}}}}}, "/auth/webauthn-credentials": {"post": {"tags": ["authentication"], "summary": "Create Webauthn Credential", "description": "Create a new webauthn credential.", "operationId": "OpenAPITag.AUTHENTICATION-create_webauthn_credential", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateWebAuthnCredentialInput"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "429": {"description": "Rate Limit Exceeded Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RateLimitExceededErrorResult"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UnexpectedErrorResult"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ValidationErrorResult"}}}}}}}, "/auth/logout": {"post": {"tags": ["authentication"], "summary": "Logout the current user.", "description": "Logout the current user.", "operationId": "OpenAPITag.AUTHENTICATION-delete_current_user_session", "security": [{"APIKeyHeader": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LogoutInput"}}}}, "responses": {"204": {"description": "Successful Response"}, "429": {"description": "Rate Limit Exceeded Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RateLimitExceededErrorResult"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UnexpectedErrorResult"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ValidationErrorResult"}}}}}}}, "/auth/sessions": {"get": {"tags": ["authentication"], "summary": "Get the current user's sessions.", "description": "Get the current user's user sessions.", "operationId": "OpenAPITag.AUTHENTICATION-get_user_sessions", "security": [{"APIKeyHeader": []}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/UserSessionSchema"}, "title": "Response Openapitag.Authentication-Get User Sessions"}}}}, "429": {"description": "Rate Limit Exceeded Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RateLimitExceededErrorResult"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UnexpectedErrorResult"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ValidationErrorResult"}}}}}}}}, "components": {"schemas": {"AttestationConveyancePreference": {"type": "string", "enum": ["none", "indirect", "direct", "enterprise"], "title": "AttestationConveyancePreference", "description": "The Relying Party's interest in receiving an attestation statement.\n\nMembers:\n    `NONE`: The Relying Party isn't interested in receiving an attestation statement\n    `INDIRECT`: The Relying Party is interested in an attestation statement, but the client is free to generate it as it sees fit\n    `DIRECT`: The Relying Party is interested in an attestation statement generated directly by the authenticator\n    `ENTERPRISE`: The Relying Party is interested in a statement with identifying information. Typically used within organizations\n\nhttps://www.w3.org/TR/webauthn-2/#enum-attestation-convey"}, "AuthenticateUserResult": {"properties": {"authenticationToken": {"type": "string", "title": "Authentication Token", "description": "The authentication token generated upon successful login.", "examples": ["6fa74977e2a810ea95ef22f5f09d887337070ae0aacdf19d411bbe78fb98bdfa"]}, "user": {"allOf": [{"$ref": "#/components/schemas/UserSchema"}], "description": "The logged in user."}}, "type": "object", "required": ["authenticationToken", "user"], "title": "AuthenticateUserResult"}, "AuthenticationCredential": {"properties": {"id": {"type": "string", "title": "Id"}, "rawId": {"type": "string", "format": "binary", "title": "Rawid"}, "response": {"$ref": "#/components/schemas/AuthenticatorAssertionResponse"}, "authenticatorAttachment": {"anyOf": [{"$ref": "#/components/schemas/AuthenticatorAttachment"}, {"type": "null"}]}, "type": {"const": "public-key", "title": "Type", "default": "public-key"}}, "type": "object", "required": ["id", "rawId", "response"], "title": "AuthenticationCredential"}, "AuthenticatorAssertionResponse": {"properties": {"clientDataJson": {"type": "string", "format": "binary", "title": "Clientdatajson"}, "authenticatorData": {"type": "string", "format": "binary", "title": "Authenticatordata"}, "signature": {"type": "string", "format": "binary", "title": "Signature"}, "userHandle": {"anyOf": [{"type": "string", "format": "binary"}, {"type": "null"}], "title": "Userhandle"}}, "type": "object", "required": ["clientDataJson", "authenticatorData", "signature"], "title": "AuthenticatorAssertionResponse"}, "AuthenticatorAttachment": {"type": "string", "enum": ["platform", "cross-platform"], "title": "AuthenticatorAttachment", "description": "How an authenticator is connected to the client/browser.\n\nMembers:\n    `PLATFORM`: A non-removable authenticator, like TouchID or Windows Hello\n    `CROSS_PLATFORM`: A \"roaming\" authenticator, like a YubiKey\n\nhttps://www.w3.org/TR/webauthn-2/#enumdef-authenticatorattachment"}, "AuthenticatorAttestationResponse": {"properties": {"clientDataJson": {"type": "string", "format": "binary", "title": "Clientdatajson"}, "attestationObject": {"type": "string", "format": "binary", "title": "Attestationobject"}, "transports": {"anyOf": [{"items": {"$ref": "#/components/schemas/AuthenticatorTransport"}, "type": "array"}, {"type": "null"}], "title": "Transports"}}, "type": "object", "required": ["clientDataJson", "attestationObject"], "title": "AuthenticatorAttestationResponse"}, "AuthenticatorSelectionCriteria": {"properties": {"authenticator_attachment": {"anyOf": [{"$ref": "#/components/schemas/AuthenticatorAttachment"}, {"type": "null"}]}, "resident_key": {"anyOf": [{"$ref": "#/components/schemas/ResidentKeyRequirement"}, {"type": "null"}]}, "require_resident_key": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Require Resident Key", "default": false}, "user_verification": {"anyOf": [{"$ref": "#/components/schemas/UserVerificationRequirement"}, {"type": "null"}], "default": "preferred"}}, "type": "object", "title": "AuthenticatorSelectionCriteria"}, "AuthenticatorTransport": {"type": "string", "enum": ["usb", "nfc", "ble", "internal", "cable", "hybrid"], "title": "AuthenticatorTransport", "description": "How an authenticator communicates to the client/browser.\n\nMembers:\n    `USB`: USB wired connection\n    `NFC`: Near Field Communication\n    `BLE`: Bluetooth Low Energy\n    `INTERNAL`: Direct connection (read: a platform authenticator)\n    `CABLE`: Cloud Assisted Bluetooth Low Energy\n    `HYBRID`: A combination of (often separate) data-transport and proximity mechanisms\n\nhttps://www.w3.org/TR/webauthn-2/#enum-transport"}, "COSEAlgorithmIdentifier": {"type": "integer", "enum": [-7, -8, -36, -37, -38, -39, -257, -258, -259, -65535], "title": "COSEAlgorithmIdentifier", "description": "Various registered values indicating cryptographic algorithms that may be used in credential responses\n\nMembers:\n    `ECDSA_SHA_256`\n    `EDDSA`\n    `ECDSA_SHA_512`\n    `RSASSA_PSS_SHA_256`\n    `RSASSA_PSS_SHA_384`\n    `RSASSA_PSS_SHA_512`\n    `RSASSA_PKCS1_v1_5_SHA_256`\n    `RSASSA_PKCS1_v1_5_SHA_384`\n    `RSASSA_PKCS1_v1_5_SHA_512`\n    `RSASSA_PKCS1_v1_5_SHA_1`\n\nhttps://www.w3.org/TR/webauthn-2/#sctn-alg-identifier\nhttps://www.iana.org/assignments/cose/cose.xhtml#algorithms"}, "ChangeUserEmailInput": {"properties": {"email": {"type": "string", "maxLength": 250, "format": "email", "title": "Email", "description": "The new email address for the user.", "examples": ["aryan_new@example.com"]}, "verificationCode": {"type": "string", "format": "password", "title": "Verification Code", "description": "The verification code for the email.", "writeOnly": true, "examples": ["43569923"]}}, "type": "object", "required": ["email", "verificationCode"], "title": "ChangeUserEmailInput"}, "ChangeUserEmailRequestInput": {"properties": {"email": {"type": "string", "maxLength": 250, "format": "email", "title": "Email", "description": "The new email address for the user.", "examples": ["aryan_new@example.com"]}, "currentPassword": {"type": "string", "format": "password", "title": "Currentpassword", "description": "The password associated with the user.", "writeOnly": true, "examples": ["super-Secret12!"]}}, "type": "object", "required": ["email", "currentPassword"], "title": "ChangeUserEmailRequestInput"}, "CreateWebAuthnCredentialInput": {"properties": {}, "type": "object", "title": "CreateWebAuthnCredentialInput"}, "HealthCheckResult": {"properties": {"status": {"const": "OK", "title": "Status", "description": "The status of the application.", "examples": ["OK"]}}, "type": "object", "required": ["status"], "title": "HealthCheckResult"}, "InvalidInputErrorResult": {"properties": {"message": {"type": "string", "title": "Message", "description": "A human readable message describing the error.", "examples": ["Invalid input detected."]}}, "type": "object", "required": ["message"], "title": "InvalidInputErrorResult"}, "LoginOptionsInput": {"properties": {"email": {"type": "string", "maxLength": 255, "format": "email", "title": "Email"}}, "type": "object", "required": ["email"], "title": "LoginOptionsInput"}, "LoginVerificationInput": {"properties": {"credential": {"type": "string", "contentMediaType": "application/json", "contentSchema": {"$ref": "#/components/schemas/AuthenticationCredential"}, "title": "Credential"}}, "type": "object", "required": ["credential"], "title": "LoginVerificationInput"}, "LogoutInput": {"properties": {"rememberSession": {"type": "boolean", "title": "Remember Session", "description": "Whether the current user's session should be remembered.", "default": true}}, "type": "object", "title": "LogoutInput"}, "PartialUserSchema": {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id", "description": "The ID of the user."}, "username": {"type": "string", "title": "Username", "description": "The username of the user.", "examples": ["aryaniyaps"]}, "createdAt": {"type": "string", "format": "date-time", "title": "Created At", "description": "When the user was created."}, "updatedAt": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "title": "Updated At", "description": "When the user was last updated."}}, "type": "object", "required": ["id", "username", "createdAt", "updatedAt"], "title": "PartialUserSchema"}, "PublicKeyCredentialCreationOptions": {"properties": {"rp": {"$ref": "#/components/schemas/PublicKeyCredentialRpEntity"}, "user": {"$ref": "#/components/schemas/PublicKeyCredentialUserEntity"}, "challenge": {"type": "string", "format": "binary", "title": "Challenge"}, "pub_key_cred_params": {"items": {"$ref": "#/components/schemas/PublicKeyCredentialParameters"}, "type": "array", "title": "Pub Key Cred Params"}, "timeout": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Timeout"}, "exclude_credentials": {"anyOf": [{"items": {"$ref": "#/components/schemas/PublicKeyCredentialDescriptor"}, "type": "array"}, {"type": "null"}], "title": "Exclude Credentials"}, "authenticator_selection": {"anyOf": [{"$ref": "#/components/schemas/AuthenticatorSelectionCriteria"}, {"type": "null"}]}, "attestation": {"allOf": [{"$ref": "#/components/schemas/AttestationConveyancePreference"}], "default": "none"}}, "type": "object", "required": ["rp", "user", "challenge", "pub_key_cred_params"], "title": "PublicKeyCredentialCreationOptions"}, "PublicKeyCredentialDescriptor": {"properties": {"id": {"type": "string", "format": "binary", "title": "Id"}, "type": {"const": "public-key", "title": "Type", "default": "public-key"}, "transports": {"anyOf": [{"items": {"$ref": "#/components/schemas/AuthenticatorTransport"}, "type": "array"}, {"type": "null"}], "title": "Transports"}}, "type": "object", "required": ["id"], "title": "PublicKeyCredentialDescriptor"}, "PublicKeyCredentialParameters": {"properties": {"type": {"const": "public-key", "title": "Type"}, "alg": {"$ref": "#/components/schemas/COSEAlgorithmIdentifier"}}, "type": "object", "required": ["type", "alg"], "title": "PublicKeyCredentialParameters"}, "PublicKeyCredentialRequestOptions": {"properties": {"challenge": {"type": "string", "format": "binary", "title": "Challenge"}, "timeout": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Timeout"}, "rp_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Rp Id"}, "allow_credentials": {"anyOf": [{"items": {"$ref": "#/components/schemas/PublicKeyCredentialDescriptor"}, "type": "array"}, {"type": "null"}], "title": "Allow Credentials"}, "user_verification": {"anyOf": [{"$ref": "#/components/schemas/UserVerificationRequirement"}, {"type": "null"}], "default": "preferred"}}, "type": "object", "required": ["challenge"], "title": "PublicKeyCredentialRequestOptions"}, "PublicKeyCredentialRpEntity": {"properties": {"name": {"type": "string", "title": "Name"}, "id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Id"}}, "type": "object", "required": ["name"], "title": "PublicKeyCredentialRpEntity"}, "PublicKeyCredentialUserEntity": {"properties": {"id": {"type": "string", "format": "binary", "title": "Id"}, "name": {"type": "string", "title": "Name"}, "display_name": {"type": "string", "title": "Display Name"}}, "type": "object", "required": ["id", "name", "display_name"], "title": "PublicKeyCredentialUserEntity"}, "RateLimitExceededErrorResult": {"properties": {"message": {"type": "string", "title": "Message", "description": "A human readable message describing the error.", "examples": ["You are being rate limited."]}, "isPrimary": {"type": "boolean", "title": "Is Primary", "description": "Whether the primary rate limiter was exceeded."}}, "type": "object", "required": ["message", "isPrimary"], "title": "RateLimitExceededErrorResult"}, "RegisterFlowStartInput": {"properties": {"email": {"type": "string", "maxLength": 255, "format": "email", "title": "Email"}}, "type": "object", "required": ["email"], "title": "RegisterFlowStartInput"}, "RegisterFlowStartResult": {"properties": {"flowId": {"type": "string", "format": "uuid", "title": "Flowid"}}, "type": "object", "required": ["flowId"], "title": "RegisterFlowStartResult"}, "RegisterFlowVerifyInput": {"properties": {"flowId": {"type": "string", "format": "uuid", "title": "Flowid"}, "verificationCode": {"type": "string", "title": "Verificationcode", "examples": ["87996502"]}}, "type": "object", "required": ["flowId", "verificationCode"], "title": "RegisterFlowVerifyInput"}, "RegisterFlowVerifyResult": {"properties": {"flowId": {"type": "string", "format": "uuid", "title": "Flowid"}}, "type": "object", "required": ["flowId"], "title": "RegisterFlowVerifyResult"}, "RegisterFlowWebAuthnFinishInput": {"properties": {"flowId": {"type": "string", "format": "uuid", "title": "Flowid"}, "displayName": {"type": "string", "maxLength": 70, "title": "Displayname", "examples": ["Aryan Iyappan"]}, "credential": {"type": "string", "contentMediaType": "application/json", "contentSchema": {"$ref": "#/components/schemas/RegistrationCredential"}, "title": "Credential"}}, "type": "object", "required": ["flowId", "displayName", "credential"], "title": "RegisterFlowWebAuthnFinishInput"}, "RegisterFlowWebAuthnFinishResult": {"properties": {"user": {"$ref": "#/components/schemas/UserSchema"}, "authenticationToken": {"type": "string", "title": "Authentication Token", "description": "The authentication token generated upon successful registration.", "examples": ["6fa74977e2a810ea95ef22f5f09d887337070ae0aacdf19d411bbe78fb98bdfa"]}}, "type": "object", "required": ["user", "authenticationToken"], "title": "RegisterFlowWebAuthnFinishResult"}, "RegisterFlowWebAuthnStartInput": {"properties": {"flowId": {"type": "string", "format": "uuid", "title": "Flowid"}, "displayName": {"type": "string", "title": "Displayname", "examples": ["My webauthn credential"]}}, "type": "object", "required": ["flowId", "displayName"], "title": "RegisterFlowWebAuthnStartInput"}, "RegistrationCredential": {"properties": {"id": {"type": "string", "title": "Id"}, "rawId": {"type": "string", "format": "binary", "title": "Rawid"}, "response": {"$ref": "#/components/schemas/AuthenticatorAttestationResponse"}, "authenticatorAttachment": {"anyOf": [{"$ref": "#/components/schemas/AuthenticatorAttachment"}, {"type": "null"}]}, "type": {"const": "public-key", "title": "Type", "default": "public-key"}}, "type": "object", "required": ["id", "rawId", "response"], "title": "RegistrationCredential"}, "ResidentKeyRequirement": {"type": "string", "enum": ["discouraged", "preferred", "required"], "title": "ResidentKeyRequirement", "description": "The Relying Party's preference for the authenticator to create a dedicated \"client-side\" credential for it. Requiring an authenticator to store a dedicated credential should not be done lightly due to the limited storage capacity of some types of authenticators.\n\nMembers:\n    `DISCOURAGED`: The authenticator should not create a dedicated credential\n    `PREFERRED`: The authenticator can create and store a dedicated credential, but if it doesn't that's alright too\n    `REQUIRED`: The authenticator MUST create a dedicated credential. If it cannot, the RP is prepared for an error to occur.\n\nhttps://www.w3.org/TR/webauthn-2/#enum-residentKeyRequirement"}, "ResourceNotFoundErrorResult": {"properties": {"message": {"type": "string", "title": "Message", "description": "A human readable message describing the error.", "examples": ["Resource with ID 123 not found."]}}, "type": "object", "required": ["message"], "title": "ResourceNotFoundErrorResult"}, "UnexpectedErrorResult": {"properties": {"message": {"type": "string", "title": "Message", "description": "A human readable message describing the error.", "examples": ["An unexpected error occurred."]}}, "type": "object", "required": ["message"], "title": "UnexpectedErrorResult"}, "UpdateUserInput": {"properties": {"displayName": {"anyOf": [{"type": "string", "maxLength": 250, "minLength": 2}, {"type": "null"}], "title": "Displayname", "description": "The new username for the user.", "examples": ["aryaniyaps_new"]}}, "type": "object", "title": "UpdateUserInput"}, "UserSchema": {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id", "description": "The ID of the user."}, "username": {"type": "string", "title": "Username", "description": "The username of the user.", "examples": ["aryaniyaps"]}, "createdAt": {"type": "string", "format": "date-time", "title": "Created At", "description": "When the user was created."}, "updatedAt": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "title": "Updated At", "description": "When the user was last updated."}, "email": {"type": "string", "title": "Email", "description": "The email of the user.", "examples": ["aryaniyaps@example.com"]}, "hasPassword": {"type": "boolean", "title": "Haspassword", "description": "Whether the user has their password set."}}, "type": "object", "required": ["id", "username", "createdAt", "updatedAt", "email", "hasPassword"], "title": "UserSchema"}, "UserSessionSchema": {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id", "description": "The ID of the user session."}, "ipAddress": {"type": "string", "format": "ipvanyaddress", "title": "IP Address", "description": "The IP address of the user session.", "examples": ["192.158.1.38"]}, "location": {"type": "string", "title": "Location", "description": "The location of the user session.", "examples": ["Los Angeles, California (US)"]}, "device": {"type": "string", "title": "User Agent", "description": "The device of the user session.", "examples": ["iPhone"]}, "loggedOutAt": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "title": "Logged Out At", "description": "When the user logged out of the session."}, "createdAt": {"type": "string", "format": "date-time", "title": "Created At", "description": "When the user session was created."}}, "type": "object", "required": ["id", "ipAddress", "location", "device", "loggedOutAt", "createdAt"], "title": "UserSessionSchema"}, "UserVerificationRequirement": {"type": "string", "enum": ["required", "preferred", "discouraged"], "title": "UserVerificationRequirement", "description": "The degree to which the Relying Party wishes to verify a user's identity.\n\nMembers:\n    `REQUIRED`: User verification must occur\n    `PREFERRED`: User verification would be great, but if not that's okay too\n    `DISCOURAGED`: User verification should not occur, but it's okay if it does\n\nhttps://www.w3.org/TR/webauthn-2/#enumdef-userverificationrequirement"}, "ValidationErrorResult": {"properties": {"message": {"type": "string", "title": "Message", "description": "A human readable message describing the error.", "examples": ["Invalid input detected."]}, "errors": {"items": {"$ref": "#/components/schemas/ValidationErrorSchema"}, "type": "array", "title": "Errors", "description": "A list of validation errors."}}, "type": "object", "required": ["message", "errors"], "title": "ValidationErrorResult"}, "ValidationErrorSchema": {"properties": {"loc": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "title": "Loc", "description": "The location of the validation error."}, "msg": {"type": "string", "title": "Msg", "description": "A message describing the validation error."}, "type": {"type": "string", "title": "Type", "description": "The type of the validation error."}}, "type": "object", "required": ["msg", "type"], "title": "ValidationErrorSchema"}}, "securitySchemes": {"APIKeyHeader": {"type": "apiKey", "in": "header", "name": "X-Authentication-Token"}}}}