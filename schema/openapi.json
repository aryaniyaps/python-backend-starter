{
  "openapi": "3.1.0",
  "info": { "title": "Starter HTTP API", "version": "0.0.1" },
  "paths": {
    "/health/": {
      "get": {
        "tags": ["health"],
        "summary": "Check the health status of the application.",
        "description": "Provides information about the health status of the application.",
        "operationId": "check_health",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HealthCheckResult" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnexpectedErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/users/@me": {
      "get": {
        "tags": ["users"],
        "summary": "Get the current user.",
        "description": "Get the current user.",
        "operationId": "get_current_user",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserSchema" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnexpectedErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResult"
                }
              }
            }
          }
        },
        "security": [{ "APIKeyCookie": [] }]
      },
      "patch": {
        "tags": ["users"],
        "summary": "Update the current user.",
        "description": "Update the current user.",
        "operationId": "update_current_user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateUserInput" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserSchema" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnexpectedErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Input Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputErrorResult"
                }
              }
            }
          }
        },
        "security": [{ "APIKeyCookie": [] }]
      }
    },
    "/users/@me/email-change-request": {
      "post": {
        "tags": ["users"],
        "summary": "Send an email change request.",
        "description": "Send an email change request.",
        "operationId": "request_current_user_email_change",
        "security": [{ "APIKeyCookie": [] }],
        "parameters": [
          {
            "name": "user-agent",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "title": "User-Agent" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeUserEmailRequestInput"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnexpectedErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Input Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/users/@me/email": {
      "patch": {
        "tags": ["users"],
        "summary": "Change the current user's email.",
        "description": "Change the current user's email.",
        "operationId": "change_current_user_email",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ChangeUserEmailInput" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserSchema" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnexpectedErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Input Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputErrorResult"
                }
              }
            }
          }
        },
        "security": [{ "APIKeyCookie": [] }]
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": ["users"],
        "summary": "Get the user with the given ID.",
        "description": "Get the user with the given ID.",
        "operationId": "get_user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "The ID of the user to get."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PartialUserSchema" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnexpectedErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/auth/register/flows/{flow_id}": {
      "get": {
        "tags": ["authentication"],
        "summary": "Get a register flow.",
        "description": "Get a register flow.",
        "operationId": "get_register_flow",
        "parameters": [
          {
            "name": "flow_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "The ID of the register flow."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RegisterFlowSchema" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnexpectedErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/auth/register/flows/start": {
      "post": {
        "tags": ["authentication"],
        "summary": "Start a register flow.",
        "description": "Start a register flow.",
        "operationId": "start_register_flow",
        "parameters": [
          {
            "name": "user-agent",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "title": "User-Agent" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterFlowStartInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterFlowStartResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnexpectedErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Input Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/auth/register/flows/cancel": {
      "post": {
        "tags": ["authentication"],
        "summary": "Cancel a register flow.",
        "description": "Cancel a register flow.",
        "operationId": "cancel_register_flow",
        "parameters": [
          {
            "name": "register_flow_id",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The ID of the register flow."
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnexpectedErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Input Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/auth/register/flows/resend-verification": {
      "post": {
        "tags": ["authentication"],
        "summary": "Resend email verification in the register flow.",
        "description": "Resend email verification in the register flow.",
        "operationId": "resend_verification_register_flow",
        "parameters": [
          {
            "name": "user-agent",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "title": "User-Agent" }
          },
          {
            "name": "register_flow_id",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The ID of the register flow."
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnexpectedErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Input Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/auth/register/flows/verify": {
      "post": {
        "tags": ["authentication"],
        "summary": "Verify a register flow.",
        "description": "Verify a register flow.",
        "operationId": "verify_register_flow",
        "parameters": [
          {
            "name": "register_flow_id",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The ID of the register flow."
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterFlowVerifyInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterFlowVerifyResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnexpectedErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Input Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/auth/register/flows/webauthn-start": {
      "post": {
        "tags": ["authentication"],
        "summary": "Start the webauthn registration in the register flow.",
        "description": "Start the webauthn registration in the register flow.",
        "operationId": "start_webauthn_register_flow",
        "parameters": [
          {
            "name": "register_flow_id",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The ID of the register flow."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterFlowWebAuthnStartResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnexpectedErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Input Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/auth/register/flows/webauthn-finish": {
      "post": {
        "tags": ["authentication"],
        "summary": "Finish the webauthn registration in the register flow.",
        "description": "Finish the webauthn registration in the register flow.",
        "operationId": "finish_webauthn_register_flow",
        "parameters": [
          {
            "name": "register_flow_id",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The ID of the register flow."
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterFlowWebAuthnFinishInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RootModel_UserSchema_"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnexpectedErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Input Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/auth/authenticate/start": {
      "post": {
        "tags": ["authentication"],
        "summary": "Generate Authentication Options",
        "description": "Generate options for retrieving a credential.",
        "operationId": "generate_authentication_options",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticateOptionsInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticateOptionsResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnexpectedErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/auth/authenticate/finish": {
      "post": {
        "tags": ["authentication"],
        "summary": "Verify Authentication Response",
        "description": "Verify the authenticator's response for authentication.",
        "operationId": "verify_authentication_response",
        "parameters": [
          {
            "name": "user-agent",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "title": "User-Agent" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticateVerificationInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RootModel_UserSchema_"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnexpectedErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/auth/webauthn-credentials": {
      "get": {
        "tags": ["authentication"],
        "summary": "Get the current user's webauthn credentials.",
        "description": "Get the current user's webauthn credentials.",
        "operationId": "get_webauthn_credentials",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/WebAuthnCredentialSchema"
                  },
                  "type": "array",
                  "title": "Response Authentication-Get Webauthn Credentials"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnexpectedErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResult"
                }
              }
            }
          }
        },
        "security": [{ "APIKeyCookie": [] }]
      },
      "post": {
        "tags": ["authentication"],
        "summary": "Create Webauthn Credential",
        "description": "Create a new webauthn credential.",
        "operationId": "create_webauthn_credential",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebAuthnCredentialInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnexpectedErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["authentication"],
        "summary": "Logout the current user.",
        "description": "Logout the current user.",
        "operationId": "delete_current_user_session",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LogoutInput" }
            }
          },
          "required": true
        },
        "responses": {
          "204": { "description": "Successful Response" },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnexpectedErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResult"
                }
              }
            }
          }
        },
        "security": [{ "APIKeyCookie": [] }]
      }
    },
    "/auth/sessions": {
      "get": {
        "tags": ["authentication"],
        "summary": "Get the current user's sessions.",
        "description": "Get the current user's user sessions.",
        "operationId": "get_user_sessions",
        "security": [{ "APIKeyCookie": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The amount of entities to fetch.",
              "default": 10,
              "title": "Limit"
            },
            "description": "The amount of entities to fetch."
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "The cursor after which entities should be fetched.",
              "title": "After"
            },
            "description": "The cursor after which entities should be fetched."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResult_UserSessionSchema_UUID_"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnexpectedErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResult"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AttestationConveyancePreference": {
        "type": "string",
        "enum": ["none", "indirect", "direct", "enterprise"],
        "title": "AttestationConveyancePreference",
        "description": "The Relying Party's interest in receiving an attestation statement.\n\nMembers:\n    `NONE`: The Relying Party isn't interested in receiving an attestation statement\n    `INDIRECT`: The Relying Party is interested in an attestation statement, but the client is free to generate it as it sees fit\n    `DIRECT`: The Relying Party is interested in an attestation statement generated directly by the authenticator\n    `ENTERPRISE`: The Relying Party is interested in a statement with identifying information. Typically used within organizations\n\nhttps://www.w3.org/TR/webauthn-2/#enum-attestation-convey"
      },
      "AuthenticateOptionsInput": {
        "properties": {
          "email": {
            "type": "string",
            "maxLength": 255,
            "format": "email",
            "title": "Email"
          }
        },
        "type": "object",
        "required": ["email"],
        "title": "AuthenticateOptionsInput"
      },
      "AuthenticateOptionsResult": {
        "properties": {
          "options": {
            "$ref": "#/components/schemas/PublicKeyCredentialRequestOptions"
          }
        },
        "type": "object",
        "required": ["options"],
        "title": "AuthenticateOptionsResult"
      },
      "AuthenticateVerificationInput": {
        "properties": {
          "credential": {
            "type": "string",
            "contentMediaType": "application/json",
            "contentSchema": {},
            "title": "Credential"
          }
        },
        "type": "object",
        "required": ["credential"],
        "title": "AuthenticateVerificationInput"
      },
      "AuthenticatorAttachment": {
        "type": "string",
        "enum": ["platform", "cross-platform"],
        "title": "AuthenticatorAttachment",
        "description": "How an authenticator is connected to the client/browser.\n\nMembers:\n    `PLATFORM`: A non-removable authenticator, like TouchID or Windows Hello\n    `CROSS_PLATFORM`: A \"roaming\" authenticator, like a YubiKey\n\nhttps://www.w3.org/TR/webauthn-2/#enumdef-authenticatorattachment"
      },
      "AuthenticatorSelectionCriteria": {
        "properties": {
          "authenticatorAttachment": {
            "anyOf": [
              { "$ref": "#/components/schemas/AuthenticatorAttachment" },
              { "type": "null" }
            ]
          },
          "residentKey": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResidentKeyRequirement" },
              { "type": "null" }
            ]
          },
          "requireResidentKey": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Requireresidentkey",
            "default": false
          },
          "userVerification": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserVerificationRequirement" },
              { "type": "null" }
            ],
            "default": "preferred"
          }
        },
        "type": "object",
        "title": "AuthenticatorSelectionCriteria"
      },
      "AuthenticatorTransport": {
        "type": "string",
        "enum": ["usb", "nfc", "ble", "internal", "cable", "hybrid"],
        "title": "AuthenticatorTransport",
        "description": "How an authenticator communicates to the client/browser.\n\nMembers:\n    `USB`: USB wired connection\n    `NFC`: Near Field Communication\n    `BLE`: Bluetooth Low Energy\n    `INTERNAL`: Direct connection (read: a platform authenticator)\n    `CABLE`: Cloud Assisted Bluetooth Low Energy\n    `HYBRID`: A combination of (often separate) data-transport and proximity mechanisms\n\nhttps://www.w3.org/TR/webauthn-2/#enum-transport"
      },
      "COSEAlgorithmIdentifier": {
        "type": "integer",
        "enum": [-7, -8, -36, -37, -38, -39, -257, -258, -259, -65535],
        "title": "COSEAlgorithmIdentifier",
        "description": "Various registered values indicating cryptographic algorithms that may be used in credential responses\n\nMembers:\n    `ECDSA_SHA_256`\n    `EDDSA`\n    `ECDSA_SHA_512`\n    `RSASSA_PSS_SHA_256`\n    `RSASSA_PSS_SHA_384`\n    `RSASSA_PSS_SHA_512`\n    `RSASSA_PKCS1_v1_5_SHA_256`\n    `RSASSA_PKCS1_v1_5_SHA_384`\n    `RSASSA_PKCS1_v1_5_SHA_512`\n    `RSASSA_PKCS1_v1_5_SHA_1`\n\nhttps://www.w3.org/TR/webauthn-2/#sctn-alg-identifier\nhttps://www.iana.org/assignments/cose/cose.xhtml#algorithms"
      },
      "ChangeUserEmailInput": {
        "properties": {
          "email": {
            "type": "string",
            "maxLength": 250,
            "format": "email",
            "title": "Email",
            "description": "The new email address for the user.",
            "examples": ["aryan_new@example.com"]
          },
          "verificationCode": {
            "type": "string",
            "format": "password",
            "title": "Verification Code",
            "description": "The verification code for the email.",
            "writeOnly": true,
            "examples": ["43569923"]
          }
        },
        "type": "object",
        "required": ["email", "verificationCode"],
        "title": "ChangeUserEmailInput"
      },
      "ChangeUserEmailRequestInput": {
        "properties": {
          "email": {
            "type": "string",
            "maxLength": 250,
            "format": "email",
            "title": "Email",
            "description": "The new email address for the user.",
            "examples": ["aryan_new@example.com"]
          },
          "currentPassword": {
            "type": "string",
            "format": "password",
            "title": "Currentpassword",
            "description": "The password associated with the user.",
            "writeOnly": true,
            "examples": ["super-Secret12!"]
          }
        },
        "type": "object",
        "required": ["email", "currentPassword"],
        "title": "ChangeUserEmailRequestInput"
      },
      "CreateWebAuthnCredentialInput": {
        "properties": {},
        "type": "object",
        "title": "CreateWebAuthnCredentialInput"
      },
      "HealthCheckResult": {
        "properties": {
          "status": {
            "const": "OK",
            "title": "Status",
            "description": "The status of the application.",
            "examples": ["OK"]
          }
        },
        "type": "object",
        "required": ["status"],
        "title": "HealthCheckResult"
      },
      "InvalidInputErrorResult": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "A human readable message describing the error.",
            "examples": ["Invalid input detected."]
          }
        },
        "type": "object",
        "required": ["message"],
        "title": "InvalidInputErrorResult"
      },
      "LogoutInput": {
        "properties": {
          "rememberSession": {
            "type": "boolean",
            "title": "Remember Session",
            "description": "Whether the current user's session should be remembered.",
            "default": true
          }
        },
        "type": "object",
        "title": "LogoutInput"
      },
      "PageInfo_UUID_": {
        "properties": {
          "nextCursor": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Nextcursor",
            "description": "The cursor to continue pagination."
          }
        },
        "type": "object",
        "required": ["nextCursor"],
        "title": "PageInfo[UUID]"
      },
      "PaginatedResult_UserSessionSchema_UUID_": {
        "properties": {
          "entities": {
            "items": { "$ref": "#/components/schemas/UserSessionSchema" },
            "type": "array",
            "title": "Entities",
            "description": "A list of entities."
          },
          "pageInfo": {
            "allOf": [{ "$ref": "#/components/schemas/PageInfo_UUID_" }],
            "description": "Information to aid in pagination."
          }
        },
        "type": "object",
        "required": ["entities", "pageInfo"],
        "title": "PaginatedResult[UserSessionSchema, UUID]"
      },
      "PartialUserSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID of the user."
          },
          "email": { "type": "string", "title": "Email" },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "When the user was created."
          },
          "updatedAt": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Updated At",
            "description": "When the user was last updated."
          },
          "avatarUrl": {
            "type": "string",
            "title": "Avatar URL",
            "description": "The Gravatar URL of the user.",
            "readOnly": true
          }
        },
        "type": "object",
        "required": ["id", "email", "createdAt", "updatedAt", "avatarUrl"],
        "title": "PartialUserSchema"
      },
      "PublicKeyCredentialCreationOptions": {
        "properties": {
          "rp": { "$ref": "#/components/schemas/PublicKeyCredentialRpEntity" },
          "user": {
            "$ref": "#/components/schemas/PublicKeyCredentialUserEntity"
          },
          "challenge": {
            "type": "string",
            "format": "binary",
            "title": "Challenge"
          },
          "pubKeyCredParams": {
            "items": {
              "$ref": "#/components/schemas/PublicKeyCredentialParameters"
            },
            "type": "array",
            "title": "Pubkeycredparams"
          },
          "timeout": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Timeout"
          },
          "excludeCredentials": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/PublicKeyCredentialDescriptor"
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Excludecredentials"
          },
          "authenticatorSelection": {
            "anyOf": [
              { "$ref": "#/components/schemas/AuthenticatorSelectionCriteria" },
              { "type": "null" }
            ]
          },
          "attestation": {
            "allOf": [
              { "$ref": "#/components/schemas/AttestationConveyancePreference" }
            ],
            "default": "none"
          }
        },
        "type": "object",
        "required": ["rp", "user", "challenge", "pubKeyCredParams"],
        "title": "PublicKeyCredentialCreationOptions"
      },
      "PublicKeyCredentialDescriptor": {
        "properties": {
          "id": { "type": "string", "format": "binary", "title": "Id" },
          "type": {
            "const": "public-key",
            "title": "Type",
            "default": "public-key"
          },
          "transports": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/AuthenticatorTransport"
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Transports"
          }
        },
        "type": "object",
        "required": ["id"],
        "title": "PublicKeyCredentialDescriptor"
      },
      "PublicKeyCredentialParameters": {
        "properties": {
          "type": { "const": "public-key", "title": "Type" },
          "alg": { "$ref": "#/components/schemas/COSEAlgorithmIdentifier" }
        },
        "type": "object",
        "required": ["type", "alg"],
        "title": "PublicKeyCredentialParameters"
      },
      "PublicKeyCredentialRequestOptions": {
        "properties": {
          "challenge": {
            "type": "string",
            "format": "binary",
            "title": "Challenge"
          },
          "timeout": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Timeout"
          },
          "rpId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Rpid"
          },
          "allowCredentials": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/PublicKeyCredentialDescriptor"
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Allowcredentials"
          },
          "userVerification": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserVerificationRequirement" },
              { "type": "null" }
            ],
            "default": "preferred"
          }
        },
        "type": "object",
        "required": ["challenge"],
        "title": "PublicKeyCredentialRequestOptions"
      },
      "PublicKeyCredentialRpEntity": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Id"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "PublicKeyCredentialRpEntity"
      },
      "PublicKeyCredentialUserEntity": {
        "properties": {
          "id": { "type": "string", "format": "binary", "title": "Id" },
          "name": { "type": "string", "title": "Name" },
          "displayName": { "type": "string", "title": "Displayname" }
        },
        "type": "object",
        "required": ["id", "name", "displayName"],
        "title": "PublicKeyCredentialUserEntity"
      },
      "RegisterFlowSchema": {
        "properties": {
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "currentStep": { "$ref": "#/components/schemas/RegisterFlowStep" },
          "email": {
            "type": "string",
            "title": "Email",
            "examples": ["a********s@example.com"]
          }
        },
        "type": "object",
        "required": ["id", "currentStep", "email"],
        "title": "RegisterFlowSchema"
      },
      "RegisterFlowStartInput": {
        "properties": {
          "email": {
            "type": "string",
            "maxLength": 255,
            "format": "email",
            "title": "Email"
          }
        },
        "type": "object",
        "required": ["email"],
        "title": "RegisterFlowStartInput"
      },
      "RegisterFlowStartResult": {
        "properties": {
          "registerFlow": { "$ref": "#/components/schemas/RegisterFlowSchema" }
        },
        "type": "object",
        "required": ["registerFlow"],
        "title": "RegisterFlowStartResult"
      },
      "RegisterFlowStep": {
        "type": "string",
        "enum": ["email_verification", "webauthn_registration"],
        "title": "RegisterFlowStep"
      },
      "RegisterFlowVerifyInput": {
        "properties": {
          "verificationCode": {
            "type": "string",
            "title": "Verificationcode",
            "examples": ["87996502"]
          }
        },
        "type": "object",
        "required": ["verificationCode"],
        "title": "RegisterFlowVerifyInput"
      },
      "RegisterFlowVerifyResult": {
        "properties": {
          "registerFlow": { "$ref": "#/components/schemas/RegisterFlowSchema" }
        },
        "type": "object",
        "required": ["registerFlow"],
        "title": "RegisterFlowVerifyResult"
      },
      "RegisterFlowWebAuthnFinishInput": {
        "properties": {
          "credential": {
            "type": "string",
            "contentMediaType": "application/json",
            "contentSchema": {},
            "title": "Credential"
          }
        },
        "type": "object",
        "required": ["credential"],
        "title": "RegisterFlowWebAuthnFinishInput"
      },
      "RegisterFlowWebAuthnStartResult": {
        "properties": {
          "registerFlow": { "$ref": "#/components/schemas/RegisterFlowSchema" },
          "options": {
            "$ref": "#/components/schemas/PublicKeyCredentialCreationOptions"
          }
        },
        "type": "object",
        "required": ["registerFlow", "options"],
        "title": "RegisterFlowWebAuthnStartResult"
      },
      "ResidentKeyRequirement": {
        "type": "string",
        "enum": ["discouraged", "preferred", "required"],
        "title": "ResidentKeyRequirement",
        "description": "The Relying Party's preference for the authenticator to create a dedicated \"client-side\" credential for it. Requiring an authenticator to store a dedicated credential should not be done lightly due to the limited storage capacity of some types of authenticators.\n\nMembers:\n    `DISCOURAGED`: The authenticator should not create a dedicated credential\n    `PREFERRED`: The authenticator can create and store a dedicated credential, but if it doesn't that's alright too\n    `REQUIRED`: The authenticator MUST create a dedicated credential. If it cannot, the RP is prepared for an error to occur.\n\nhttps://www.w3.org/TR/webauthn-2/#enum-residentKeyRequirement"
      },
      "ResourceNotFoundErrorResult": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "A human readable message describing the error.",
            "examples": ["Resource with ID 123 not found."]
          }
        },
        "type": "object",
        "required": ["message"],
        "title": "ResourceNotFoundErrorResult"
      },
      "RootModel_UserSchema_": {
        "allOf": [{ "$ref": "#/components/schemas/UserSchema" }],
        "title": "RootModel[UserSchema]"
      },
      "UnexpectedErrorResult": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "A human readable message describing the error.",
            "examples": ["An unexpected error occurred."]
          }
        },
        "type": "object",
        "required": ["message"],
        "title": "UnexpectedErrorResult"
      },
      "UpdateUserInput": {
        "properties": {
          "displayName": {
            "anyOf": [
              { "type": "string", "maxLength": 250, "minLength": 2 },
              { "type": "null" }
            ],
            "title": "Displayname",
            "description": "The new username for the user.",
            "examples": ["aryaniyaps_new"]
          }
        },
        "type": "object",
        "title": "UpdateUserInput"
      },
      "UserSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID of the user."
          },
          "email": {
            "type": "string",
            "title": "Email",
            "description": "The email of the user.",
            "examples": ["aryaniyaps@example.com"]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "When the user was created."
          },
          "updatedAt": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Updated At",
            "description": "When the user was last updated."
          },
          "avatarUrl": {
            "type": "string",
            "title": "Avatar URL",
            "description": "The Gravatar URL of the user.",
            "readOnly": true
          }
        },
        "type": "object",
        "required": ["id", "email", "createdAt", "updatedAt", "avatarUrl"],
        "title": "UserSchema"
      },
      "UserSessionSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID of the user session."
          },
          "ipAddress": {
            "type": "string",
            "format": "ipvanyaddress",
            "title": "IP Address",
            "description": "The IP address of the user session.",
            "examples": ["192.158.1.38"]
          },
          "location": {
            "type": "string",
            "title": "Location",
            "description": "The location of the user session.",
            "examples": ["Los Angeles, California (US)"]
          },
          "userAgent": {
            "type": "string",
            "title": "User Agent",
            "description": "The user agent of the user session.",
            "examples": [
              "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36"
            ]
          },
          "loggedOutAt": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Logged Out At",
            "description": "When the user logged out of the session."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "When the user session was created."
          }
        },
        "type": "object",
        "required": [
          "id",
          "ipAddress",
          "location",
          "userAgent",
          "loggedOutAt",
          "createdAt"
        ],
        "title": "UserSessionSchema"
      },
      "UserVerificationRequirement": {
        "type": "string",
        "enum": ["required", "preferred", "discouraged"],
        "title": "UserVerificationRequirement",
        "description": "The degree to which the Relying Party wishes to verify a user's identity.\n\nMembers:\n    `REQUIRED`: User verification must occur\n    `PREFERRED`: User verification would be great, but if not that's okay too\n    `DISCOURAGED`: User verification should not occur, but it's okay if it does\n\nhttps://www.w3.org/TR/webauthn-2/#enumdef-userverificationrequirement"
      },
      "ValidationErrorResult": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "A human readable message describing the error.",
            "examples": ["Invalid input detected."]
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/ValidationErrorSchema" },
            "type": "array",
            "title": "Errors",
            "description": "A list of validation errors."
          }
        },
        "type": "object",
        "required": ["message", "errors"],
        "title": "ValidationErrorResult"
      },
      "ValidationErrorSchema": {
        "properties": {
          "loc": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Loc",
            "description": "The location of the validation error."
          },
          "msg": {
            "type": "string",
            "title": "Msg",
            "description": "A message describing the validation error."
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The type of the validation error."
          }
        },
        "type": "object",
        "required": ["msg", "type"],
        "title": "ValidationErrorSchema"
      },
      "WebAuthnCredentialSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID of the WebAuthn credential."
          },
          "credentialId": {
            "type": "string",
            "format": "base64url",
            "title": "Credentialid",
            "description": "The credential ID of the WebAuthn credential."
          },
          "publicKey": {
            "type": "string",
            "format": "base64url",
            "title": "Publickey",
            "description": "The public key of the WebAuthn credential."
          },
          "deviceType": {
            "type": "string",
            "title": "Devicetype",
            "description": "The device type of the WebAuthn credential."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "When the user session was created."
          }
        },
        "type": "object",
        "required": [
          "id",
          "credentialId",
          "publicKey",
          "deviceType",
          "createdAt"
        ],
        "title": "WebAuthnCredentialSchema"
      }
    },
    "securitySchemes": {
      "APIKeyCookie": {
        "type": "apiKey",
        "in": "cookie",
        "name": "authentication_token"
      }
    }
  }
}
