/* tslint:disable */
/* eslint-disable */
/**
 * Starter HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangeUserEmailInput,
  ChangeUserEmailRequestInput,
  InvalidInputErrorResult,
  PartialUserSchema,
  ResourceNotFoundErrorResult,
  UnexpectedErrorResult,
  UpdateUserInput,
  UserSchema,
  ValidationErrorResult,
} from '../models/index';
import {
    ChangeUserEmailInputFromJSON,
    ChangeUserEmailInputToJSON,
    ChangeUserEmailRequestInputFromJSON,
    ChangeUserEmailRequestInputToJSON,
    InvalidInputErrorResultFromJSON,
    InvalidInputErrorResultToJSON,
    PartialUserSchemaFromJSON,
    PartialUserSchemaToJSON,
    ResourceNotFoundErrorResultFromJSON,
    ResourceNotFoundErrorResultToJSON,
    UnexpectedErrorResultFromJSON,
    UnexpectedErrorResultToJSON,
    UpdateUserInputFromJSON,
    UpdateUserInputToJSON,
    UserSchemaFromJSON,
    UserSchemaToJSON,
    ValidationErrorResultFromJSON,
    ValidationErrorResultToJSON,
} from '../models/index';

export interface ChangeCurrentUserEmailRequest {
    changeUserEmailInput: ChangeUserEmailInput;
}

export interface GetUserRequest {
    userId: string;
}

export interface RequestCurrentUserEmailChangeRequest {
    userAgent: string;
    changeUserEmailRequestInput: ChangeUserEmailRequestInput;
}

export interface UpdateCurrentUserRequest {
    updateUserInput: UpdateUserInput;
}

/**
 * UsersApi - interface
 * 
 * @export
 * @interface UsersApiInterface
 */
export interface UsersApiInterface {
    /**
     * Change the current user\'s email.
     * @summary Change the current user\'s email.
     * @param {ChangeUserEmailInput} changeUserEmailInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    changeCurrentUserEmailRaw(requestParameters: ChangeCurrentUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSchema>>;

    /**
     * Change the current user\'s email.
     * Change the current user\'s email.
     */
    changeCurrentUserEmail(requestParameters: ChangeCurrentUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSchema>;

    /**
     * Get the current user.
     * @summary Get the current user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSchema>>;

    /**
     * Get the current user.
     * Get the current user.
     */
    getCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSchema>;

    /**
     * Get the user with the given ID.
     * @summary Get the user with the given ID.
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PartialUserSchema>>;

    /**
     * Get the user with the given ID.
     * Get the user with the given ID.
     */
    getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PartialUserSchema>;

    /**
     * Send an email change request.
     * @summary Send an email change request.
     * @param {string} userAgent 
     * @param {ChangeUserEmailRequestInput} changeUserEmailRequestInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    requestCurrentUserEmailChangeRaw(requestParameters: RequestCurrentUserEmailChangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Send an email change request.
     * Send an email change request.
     */
    requestCurrentUserEmailChange(requestParameters: RequestCurrentUserEmailChangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Update the current user.
     * @summary Update the current user.
     * @param {UpdateUserInput} updateUserInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    updateCurrentUserRaw(requestParameters: UpdateCurrentUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSchema>>;

    /**
     * Update the current user.
     * Update the current user.
     */
    updateCurrentUser(requestParameters: UpdateCurrentUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSchema>;

}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI implements UsersApiInterface {

    /**
     * Change the current user\'s email.
     * Change the current user\'s email.
     */
    async changeCurrentUserEmailRaw(requestParameters: ChangeCurrentUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSchema>> {
        if (requestParameters.changeUserEmailInput === null || requestParameters.changeUserEmailInput === undefined) {
            throw new runtime.RequiredError('changeUserEmailInput','Required parameter requestParameters.changeUserEmailInput was null or undefined when calling changeCurrentUserEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/@me/email`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeUserEmailInputToJSON(requestParameters.changeUserEmailInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSchemaFromJSON(jsonValue));
    }

    /**
     * Change the current user\'s email.
     * Change the current user\'s email.
     */
    async changeCurrentUserEmail(requestParameters: ChangeCurrentUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSchema> {
        const response = await this.changeCurrentUserEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the current user.
     * Get the current user.
     */
    async getCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/@me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSchemaFromJSON(jsonValue));
    }

    /**
     * Get the current user.
     * Get the current user.
     */
    async getCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSchema> {
        const response = await this.getCurrentUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the user with the given ID.
     * Get the user with the given ID.
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PartialUserSchema>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PartialUserSchemaFromJSON(jsonValue));
    }

    /**
     * Get the user with the given ID.
     * Get the user with the given ID.
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PartialUserSchema> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send an email change request.
     * Send an email change request.
     */
    async requestCurrentUserEmailChangeRaw(requestParameters: RequestCurrentUserEmailChangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.userAgent === null || requestParameters.userAgent === undefined) {
            throw new runtime.RequiredError('userAgent','Required parameter requestParameters.userAgent was null or undefined when calling requestCurrentUserEmailChange.');
        }

        if (requestParameters.changeUserEmailRequestInput === null || requestParameters.changeUserEmailRequestInput === undefined) {
            throw new runtime.RequiredError('changeUserEmailRequestInput','Required parameter requestParameters.changeUserEmailRequestInput was null or undefined when calling requestCurrentUserEmailChange.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.userAgent !== undefined && requestParameters.userAgent !== null) {
            headerParameters['user-agent'] = String(requestParameters.userAgent);
        }

        const response = await this.request({
            path: `/users/@me/email-change-request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeUserEmailRequestInputToJSON(requestParameters.changeUserEmailRequestInput),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Send an email change request.
     * Send an email change request.
     */
    async requestCurrentUserEmailChange(requestParameters: RequestCurrentUserEmailChangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.requestCurrentUserEmailChangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the current user.
     * Update the current user.
     */
    async updateCurrentUserRaw(requestParameters: UpdateCurrentUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSchema>> {
        if (requestParameters.updateUserInput === null || requestParameters.updateUserInput === undefined) {
            throw new runtime.RequiredError('updateUserInput','Required parameter requestParameters.updateUserInput was null or undefined when calling updateCurrentUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/@me`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserInputToJSON(requestParameters.updateUserInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSchemaFromJSON(jsonValue));
    }

    /**
     * Update the current user.
     * Update the current user.
     */
    async updateCurrentUser(requestParameters: UpdateCurrentUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSchema> {
        const response = await this.updateCurrentUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
