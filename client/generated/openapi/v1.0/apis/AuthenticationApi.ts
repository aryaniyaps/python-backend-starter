/* tslint:disable */
/* eslint-disable */
/**
 * Starter HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  After,
  AuthenticateOptionsInput,
  AuthenticateOptionsResult,
  AuthenticateVerificationInput,
  InvalidInputErrorResult,
  LogoutInput,
  PaginatedResultUserSessionSchemaUUID,
  RegisterFlowSchema,
  RegisterFlowStartInput,
  RegisterFlowStartResult,
  RegisterFlowVerifyInput,
  RegisterFlowVerifyResult,
  RegisterFlowWebAuthnFinishInput,
  RegisterFlowWebAuthnStartResult,
  ResourceNotFoundErrorResult,
  RootModelUserSchema,
  UnexpectedErrorResult,
  ValidationErrorResult,
  WebAuthnCredentialSchema,
} from '../models/index';
import {
    AfterFromJSON,
    AfterToJSON,
    AuthenticateOptionsInputFromJSON,
    AuthenticateOptionsInputToJSON,
    AuthenticateOptionsResultFromJSON,
    AuthenticateOptionsResultToJSON,
    AuthenticateVerificationInputFromJSON,
    AuthenticateVerificationInputToJSON,
    InvalidInputErrorResultFromJSON,
    InvalidInputErrorResultToJSON,
    LogoutInputFromJSON,
    LogoutInputToJSON,
    PaginatedResultUserSessionSchemaUUIDFromJSON,
    PaginatedResultUserSessionSchemaUUIDToJSON,
    RegisterFlowSchemaFromJSON,
    RegisterFlowSchemaToJSON,
    RegisterFlowStartInputFromJSON,
    RegisterFlowStartInputToJSON,
    RegisterFlowStartResultFromJSON,
    RegisterFlowStartResultToJSON,
    RegisterFlowVerifyInputFromJSON,
    RegisterFlowVerifyInputToJSON,
    RegisterFlowVerifyResultFromJSON,
    RegisterFlowVerifyResultToJSON,
    RegisterFlowWebAuthnFinishInputFromJSON,
    RegisterFlowWebAuthnFinishInputToJSON,
    RegisterFlowWebAuthnStartResultFromJSON,
    RegisterFlowWebAuthnStartResultToJSON,
    ResourceNotFoundErrorResultFromJSON,
    ResourceNotFoundErrorResultToJSON,
    RootModelUserSchemaFromJSON,
    RootModelUserSchemaToJSON,
    UnexpectedErrorResultFromJSON,
    UnexpectedErrorResultToJSON,
    ValidationErrorResultFromJSON,
    ValidationErrorResultToJSON,
    WebAuthnCredentialSchemaFromJSON,
    WebAuthnCredentialSchemaToJSON,
} from '../models/index';

export interface OpenAPITagAUTHENTICATIONCancelRegisterFlowRequest {
    registerFlowId: string;
}

export interface OpenAPITagAUTHENTICATIONCreateWebauthnCredentialRequest {
    body: object;
}

export interface OpenAPITagAUTHENTICATIONDeleteCurrentUserSessionRequest {
    logoutInput: LogoutInput;
}

export interface OpenAPITagAUTHENTICATIONFinishWebauthnRegisterFlowRequest {
    registerFlowId: string;
    registerFlowWebAuthnFinishInput: RegisterFlowWebAuthnFinishInput;
}

export interface OpenAPITagAUTHENTICATIONGenerateAuthenticationOptionsRequest {
    authenticateOptionsInput: AuthenticateOptionsInput;
}

export interface OpenAPITagAUTHENTICATIONGetRegisterFlowRequest {
    flowId: string;
}

export interface OpenAPITagAUTHENTICATIONGetUserSessionsRequest {
    limit?: number;
    after?: After;
}

export interface OpenAPITagAUTHENTICATIONResendVerificationRegisterFlowRequest {
    userAgent: string;
    registerFlowId: string;
}

export interface OpenAPITagAUTHENTICATIONStartRegisterFlowRequest {
    userAgent: string;
    registerFlowStartInput: RegisterFlowStartInput;
}

export interface OpenAPITagAUTHENTICATIONStartWebauthnRegisterFlowRequest {
    registerFlowId: string;
}

export interface OpenAPITagAUTHENTICATIONVerifyAuthenticationResponseRequest {
    userAgent: string;
    authenticateVerificationInput: AuthenticateVerificationInput;
}

export interface OpenAPITagAUTHENTICATIONVerifyRegisterFlowRequest {
    registerFlowId: string;
    registerFlowVerifyInput: RegisterFlowVerifyInput;
}

/**
 * AuthenticationApi - interface
 * 
 * @export
 * @interface AuthenticationApiInterface
 */
export interface AuthenticationApiInterface {
    /**
     * Cancel a register flow.
     * @summary Cancel a register flow.
     * @param {string} registerFlowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    openAPITagAUTHENTICATIONCancelRegisterFlowRaw(requestParameters: OpenAPITagAUTHENTICATIONCancelRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Cancel a register flow.
     * Cancel a register flow.
     */
    openAPITagAUTHENTICATIONCancelRegisterFlow(requestParameters: OpenAPITagAUTHENTICATIONCancelRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Create a new webauthn credential.
     * @summary Create Webauthn Credential
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    openAPITagAUTHENTICATIONCreateWebauthnCredentialRaw(requestParameters: OpenAPITagAUTHENTICATIONCreateWebauthnCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Create a new webauthn credential.
     * Create Webauthn Credential
     */
    openAPITagAUTHENTICATIONCreateWebauthnCredential(requestParameters: OpenAPITagAUTHENTICATIONCreateWebauthnCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Logout the current user.
     * @summary Logout the current user.
     * @param {LogoutInput} logoutInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    openAPITagAUTHENTICATIONDeleteCurrentUserSessionRaw(requestParameters: OpenAPITagAUTHENTICATIONDeleteCurrentUserSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Logout the current user.
     * Logout the current user.
     */
    openAPITagAUTHENTICATIONDeleteCurrentUserSession(requestParameters: OpenAPITagAUTHENTICATIONDeleteCurrentUserSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Finish the webauthn registration in the register flow.
     * @summary Finish the webauthn registration in the register flow.
     * @param {string} registerFlowId 
     * @param {RegisterFlowWebAuthnFinishInput} registerFlowWebAuthnFinishInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    openAPITagAUTHENTICATIONFinishWebauthnRegisterFlowRaw(requestParameters: OpenAPITagAUTHENTICATIONFinishWebauthnRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootModelUserSchema>>;

    /**
     * Finish the webauthn registration in the register flow.
     * Finish the webauthn registration in the register flow.
     */
    openAPITagAUTHENTICATIONFinishWebauthnRegisterFlow(requestParameters: OpenAPITagAUTHENTICATIONFinishWebauthnRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootModelUserSchema>;

    /**
     * Generate options for retrieving a credential.
     * @summary Generate Authentication Options
     * @param {AuthenticateOptionsInput} authenticateOptionsInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    openAPITagAUTHENTICATIONGenerateAuthenticationOptionsRaw(requestParameters: OpenAPITagAUTHENTICATIONGenerateAuthenticationOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticateOptionsResult>>;

    /**
     * Generate options for retrieving a credential.
     * Generate Authentication Options
     */
    openAPITagAUTHENTICATIONGenerateAuthenticationOptions(requestParameters: OpenAPITagAUTHENTICATIONGenerateAuthenticationOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticateOptionsResult>;

    /**
     * Get a register flow.
     * @summary Get a register flow.
     * @param {string} flowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    openAPITagAUTHENTICATIONGetRegisterFlowRaw(requestParameters: OpenAPITagAUTHENTICATIONGetRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterFlowSchema>>;

    /**
     * Get a register flow.
     * Get a register flow.
     */
    openAPITagAUTHENTICATIONGetRegisterFlow(requestParameters: OpenAPITagAUTHENTICATIONGetRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterFlowSchema>;

    /**
     * Get the current user\'s user sessions.
     * @summary Get the current user\'s sessions.
     * @param {number} [limit] The amount of entities to fetch.
     * @param {After} [after] The cursor after which entities should be fetched.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    openAPITagAUTHENTICATIONGetUserSessionsRaw(requestParameters: OpenAPITagAUTHENTICATIONGetUserSessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResultUserSessionSchemaUUID>>;

    /**
     * Get the current user\'s user sessions.
     * Get the current user\'s sessions.
     */
    openAPITagAUTHENTICATIONGetUserSessions(requestParameters: OpenAPITagAUTHENTICATIONGetUserSessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResultUserSessionSchemaUUID>;

    /**
     * Get the current user\'s webauthn credentials.
     * @summary Get the current user\'s webauthn credentials.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    openAPITagAUTHENTICATIONGetWebauthnCredentialsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WebAuthnCredentialSchema>>>;

    /**
     * Get the current user\'s webauthn credentials.
     * Get the current user\'s webauthn credentials.
     */
    openAPITagAUTHENTICATIONGetWebauthnCredentials(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WebAuthnCredentialSchema>>;

    /**
     * Resend email verification in the register flow.
     * @summary Resend email verification in the register flow.
     * @param {string} userAgent 
     * @param {string} registerFlowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    openAPITagAUTHENTICATIONResendVerificationRegisterFlowRaw(requestParameters: OpenAPITagAUTHENTICATIONResendVerificationRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Resend email verification in the register flow.
     * Resend email verification in the register flow.
     */
    openAPITagAUTHENTICATIONResendVerificationRegisterFlow(requestParameters: OpenAPITagAUTHENTICATIONResendVerificationRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Start a register flow.
     * @summary Start a register flow.
     * @param {string} userAgent 
     * @param {RegisterFlowStartInput} registerFlowStartInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    openAPITagAUTHENTICATIONStartRegisterFlowRaw(requestParameters: OpenAPITagAUTHENTICATIONStartRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterFlowStartResult>>;

    /**
     * Start a register flow.
     * Start a register flow.
     */
    openAPITagAUTHENTICATIONStartRegisterFlow(requestParameters: OpenAPITagAUTHENTICATIONStartRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterFlowStartResult>;

    /**
     * Start the webauthn registration in the register flow.
     * @summary Start the webauthn registration in the register flow.
     * @param {string} registerFlowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    openAPITagAUTHENTICATIONStartWebauthnRegisterFlowRaw(requestParameters: OpenAPITagAUTHENTICATIONStartWebauthnRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterFlowWebAuthnStartResult>>;

    /**
     * Start the webauthn registration in the register flow.
     * Start the webauthn registration in the register flow.
     */
    openAPITagAUTHENTICATIONStartWebauthnRegisterFlow(requestParameters: OpenAPITagAUTHENTICATIONStartWebauthnRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterFlowWebAuthnStartResult>;

    /**
     * Verify the authenticator\'s response for authentication.
     * @summary Verify Authentication Response
     * @param {string} userAgent 
     * @param {AuthenticateVerificationInput} authenticateVerificationInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    openAPITagAUTHENTICATIONVerifyAuthenticationResponseRaw(requestParameters: OpenAPITagAUTHENTICATIONVerifyAuthenticationResponseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootModelUserSchema>>;

    /**
     * Verify the authenticator\'s response for authentication.
     * Verify Authentication Response
     */
    openAPITagAUTHENTICATIONVerifyAuthenticationResponse(requestParameters: OpenAPITagAUTHENTICATIONVerifyAuthenticationResponseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootModelUserSchema>;

    /**
     * Verify a register flow.
     * @summary Verify a register flow.
     * @param {string} registerFlowId 
     * @param {RegisterFlowVerifyInput} registerFlowVerifyInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    openAPITagAUTHENTICATIONVerifyRegisterFlowRaw(requestParameters: OpenAPITagAUTHENTICATIONVerifyRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterFlowVerifyResult>>;

    /**
     * Verify a register flow.
     * Verify a register flow.
     */
    openAPITagAUTHENTICATIONVerifyRegisterFlow(requestParameters: OpenAPITagAUTHENTICATIONVerifyRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterFlowVerifyResult>;

}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI implements AuthenticationApiInterface {

    /**
     * Cancel a register flow.
     * Cancel a register flow.
     */
    async openAPITagAUTHENTICATIONCancelRegisterFlowRaw(requestParameters: OpenAPITagAUTHENTICATIONCancelRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.registerFlowId === null || requestParameters.registerFlowId === undefined) {
            throw new runtime.RequiredError('registerFlowId','Required parameter requestParameters.registerFlowId was null or undefined when calling openAPITagAUTHENTICATIONCancelRegisterFlow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/register/flows/cancel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancel a register flow.
     * Cancel a register flow.
     */
    async openAPITagAUTHENTICATIONCancelRegisterFlow(requestParameters: OpenAPITagAUTHENTICATIONCancelRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.openAPITagAUTHENTICATIONCancelRegisterFlowRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new webauthn credential.
     * Create Webauthn Credential
     */
    async openAPITagAUTHENTICATIONCreateWebauthnCredentialRaw(requestParameters: OpenAPITagAUTHENTICATIONCreateWebauthnCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling openAPITagAUTHENTICATIONCreateWebauthnCredential.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/webauthn-credentials`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create a new webauthn credential.
     * Create Webauthn Credential
     */
    async openAPITagAUTHENTICATIONCreateWebauthnCredential(requestParameters: OpenAPITagAUTHENTICATIONCreateWebauthnCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.openAPITagAUTHENTICATIONCreateWebauthnCredentialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logout the current user.
     * Logout the current user.
     */
    async openAPITagAUTHENTICATIONDeleteCurrentUserSessionRaw(requestParameters: OpenAPITagAUTHENTICATIONDeleteCurrentUserSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.logoutInput === null || requestParameters.logoutInput === undefined) {
            throw new runtime.RequiredError('logoutInput','Required parameter requestParameters.logoutInput was null or undefined when calling openAPITagAUTHENTICATIONDeleteCurrentUserSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LogoutInputToJSON(requestParameters.logoutInput),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Logout the current user.
     * Logout the current user.
     */
    async openAPITagAUTHENTICATIONDeleteCurrentUserSession(requestParameters: OpenAPITagAUTHENTICATIONDeleteCurrentUserSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.openAPITagAUTHENTICATIONDeleteCurrentUserSessionRaw(requestParameters, initOverrides);
    }

    /**
     * Finish the webauthn registration in the register flow.
     * Finish the webauthn registration in the register flow.
     */
    async openAPITagAUTHENTICATIONFinishWebauthnRegisterFlowRaw(requestParameters: OpenAPITagAUTHENTICATIONFinishWebauthnRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootModelUserSchema>> {
        if (requestParameters.registerFlowId === null || requestParameters.registerFlowId === undefined) {
            throw new runtime.RequiredError('registerFlowId','Required parameter requestParameters.registerFlowId was null or undefined when calling openAPITagAUTHENTICATIONFinishWebauthnRegisterFlow.');
        }

        if (requestParameters.registerFlowWebAuthnFinishInput === null || requestParameters.registerFlowWebAuthnFinishInput === undefined) {
            throw new runtime.RequiredError('registerFlowWebAuthnFinishInput','Required parameter requestParameters.registerFlowWebAuthnFinishInput was null or undefined when calling openAPITagAUTHENTICATIONFinishWebauthnRegisterFlow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/register/flows/webauthn-finish`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterFlowWebAuthnFinishInputToJSON(requestParameters.registerFlowWebAuthnFinishInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RootModelUserSchemaFromJSON(jsonValue));
    }

    /**
     * Finish the webauthn registration in the register flow.
     * Finish the webauthn registration in the register flow.
     */
    async openAPITagAUTHENTICATIONFinishWebauthnRegisterFlow(requestParameters: OpenAPITagAUTHENTICATIONFinishWebauthnRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootModelUserSchema> {
        const response = await this.openAPITagAUTHENTICATIONFinishWebauthnRegisterFlowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate options for retrieving a credential.
     * Generate Authentication Options
     */
    async openAPITagAUTHENTICATIONGenerateAuthenticationOptionsRaw(requestParameters: OpenAPITagAUTHENTICATIONGenerateAuthenticationOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticateOptionsResult>> {
        if (requestParameters.authenticateOptionsInput === null || requestParameters.authenticateOptionsInput === undefined) {
            throw new runtime.RequiredError('authenticateOptionsInput','Required parameter requestParameters.authenticateOptionsInput was null or undefined when calling openAPITagAUTHENTICATIONGenerateAuthenticationOptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/authenticate/start`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticateOptionsInputToJSON(requestParameters.authenticateOptionsInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticateOptionsResultFromJSON(jsonValue));
    }

    /**
     * Generate options for retrieving a credential.
     * Generate Authentication Options
     */
    async openAPITagAUTHENTICATIONGenerateAuthenticationOptions(requestParameters: OpenAPITagAUTHENTICATIONGenerateAuthenticationOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticateOptionsResult> {
        const response = await this.openAPITagAUTHENTICATIONGenerateAuthenticationOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a register flow.
     * Get a register flow.
     */
    async openAPITagAUTHENTICATIONGetRegisterFlowRaw(requestParameters: OpenAPITagAUTHENTICATIONGetRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterFlowSchema>> {
        if (requestParameters.flowId === null || requestParameters.flowId === undefined) {
            throw new runtime.RequiredError('flowId','Required parameter requestParameters.flowId was null or undefined when calling openAPITagAUTHENTICATIONGetRegisterFlow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/register/flows/{flow_id}`.replace(`{${"flow_id"}}`, encodeURIComponent(String(requestParameters.flowId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterFlowSchemaFromJSON(jsonValue));
    }

    /**
     * Get a register flow.
     * Get a register flow.
     */
    async openAPITagAUTHENTICATIONGetRegisterFlow(requestParameters: OpenAPITagAUTHENTICATIONGetRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterFlowSchema> {
        const response = await this.openAPITagAUTHENTICATIONGetRegisterFlowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the current user\'s user sessions.
     * Get the current user\'s sessions.
     */
    async openAPITagAUTHENTICATIONGetUserSessionsRaw(requestParameters: OpenAPITagAUTHENTICATIONGetUserSessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResultUserSessionSchemaUUID>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/sessions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedResultUserSessionSchemaUUIDFromJSON(jsonValue));
    }

    /**
     * Get the current user\'s user sessions.
     * Get the current user\'s sessions.
     */
    async openAPITagAUTHENTICATIONGetUserSessions(requestParameters: OpenAPITagAUTHENTICATIONGetUserSessionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResultUserSessionSchemaUUID> {
        const response = await this.openAPITagAUTHENTICATIONGetUserSessionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the current user\'s webauthn credentials.
     * Get the current user\'s webauthn credentials.
     */
    async openAPITagAUTHENTICATIONGetWebauthnCredentialsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WebAuthnCredentialSchema>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/webauthn-credentials`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WebAuthnCredentialSchemaFromJSON));
    }

    /**
     * Get the current user\'s webauthn credentials.
     * Get the current user\'s webauthn credentials.
     */
    async openAPITagAUTHENTICATIONGetWebauthnCredentials(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WebAuthnCredentialSchema>> {
        const response = await this.openAPITagAUTHENTICATIONGetWebauthnCredentialsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Resend email verification in the register flow.
     * Resend email verification in the register flow.
     */
    async openAPITagAUTHENTICATIONResendVerificationRegisterFlowRaw(requestParameters: OpenAPITagAUTHENTICATIONResendVerificationRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.userAgent === null || requestParameters.userAgent === undefined) {
            throw new runtime.RequiredError('userAgent','Required parameter requestParameters.userAgent was null or undefined when calling openAPITagAUTHENTICATIONResendVerificationRegisterFlow.');
        }

        if (requestParameters.registerFlowId === null || requestParameters.registerFlowId === undefined) {
            throw new runtime.RequiredError('registerFlowId','Required parameter requestParameters.registerFlowId was null or undefined when calling openAPITagAUTHENTICATIONResendVerificationRegisterFlow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.userAgent !== undefined && requestParameters.userAgent !== null) {
            headerParameters['user-agent'] = String(requestParameters.userAgent);
        }

        const response = await this.request({
            path: `/auth/register/flows/resend-verification`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Resend email verification in the register flow.
     * Resend email verification in the register flow.
     */
    async openAPITagAUTHENTICATIONResendVerificationRegisterFlow(requestParameters: OpenAPITagAUTHENTICATIONResendVerificationRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.openAPITagAUTHENTICATIONResendVerificationRegisterFlowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start a register flow.
     * Start a register flow.
     */
    async openAPITagAUTHENTICATIONStartRegisterFlowRaw(requestParameters: OpenAPITagAUTHENTICATIONStartRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterFlowStartResult>> {
        if (requestParameters.userAgent === null || requestParameters.userAgent === undefined) {
            throw new runtime.RequiredError('userAgent','Required parameter requestParameters.userAgent was null or undefined when calling openAPITagAUTHENTICATIONStartRegisterFlow.');
        }

        if (requestParameters.registerFlowStartInput === null || requestParameters.registerFlowStartInput === undefined) {
            throw new runtime.RequiredError('registerFlowStartInput','Required parameter requestParameters.registerFlowStartInput was null or undefined when calling openAPITagAUTHENTICATIONStartRegisterFlow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.userAgent !== undefined && requestParameters.userAgent !== null) {
            headerParameters['user-agent'] = String(requestParameters.userAgent);
        }

        const response = await this.request({
            path: `/auth/register/flows/start`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterFlowStartInputToJSON(requestParameters.registerFlowStartInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterFlowStartResultFromJSON(jsonValue));
    }

    /**
     * Start a register flow.
     * Start a register flow.
     */
    async openAPITagAUTHENTICATIONStartRegisterFlow(requestParameters: OpenAPITagAUTHENTICATIONStartRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterFlowStartResult> {
        const response = await this.openAPITagAUTHENTICATIONStartRegisterFlowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start the webauthn registration in the register flow.
     * Start the webauthn registration in the register flow.
     */
    async openAPITagAUTHENTICATIONStartWebauthnRegisterFlowRaw(requestParameters: OpenAPITagAUTHENTICATIONStartWebauthnRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterFlowWebAuthnStartResult>> {
        if (requestParameters.registerFlowId === null || requestParameters.registerFlowId === undefined) {
            throw new runtime.RequiredError('registerFlowId','Required parameter requestParameters.registerFlowId was null or undefined when calling openAPITagAUTHENTICATIONStartWebauthnRegisterFlow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/register/flows/webauthn-start`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterFlowWebAuthnStartResultFromJSON(jsonValue));
    }

    /**
     * Start the webauthn registration in the register flow.
     * Start the webauthn registration in the register flow.
     */
    async openAPITagAUTHENTICATIONStartWebauthnRegisterFlow(requestParameters: OpenAPITagAUTHENTICATIONStartWebauthnRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterFlowWebAuthnStartResult> {
        const response = await this.openAPITagAUTHENTICATIONStartWebauthnRegisterFlowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify the authenticator\'s response for authentication.
     * Verify Authentication Response
     */
    async openAPITagAUTHENTICATIONVerifyAuthenticationResponseRaw(requestParameters: OpenAPITagAUTHENTICATIONVerifyAuthenticationResponseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootModelUserSchema>> {
        if (requestParameters.userAgent === null || requestParameters.userAgent === undefined) {
            throw new runtime.RequiredError('userAgent','Required parameter requestParameters.userAgent was null or undefined when calling openAPITagAUTHENTICATIONVerifyAuthenticationResponse.');
        }

        if (requestParameters.authenticateVerificationInput === null || requestParameters.authenticateVerificationInput === undefined) {
            throw new runtime.RequiredError('authenticateVerificationInput','Required parameter requestParameters.authenticateVerificationInput was null or undefined when calling openAPITagAUTHENTICATIONVerifyAuthenticationResponse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.userAgent !== undefined && requestParameters.userAgent !== null) {
            headerParameters['user-agent'] = String(requestParameters.userAgent);
        }

        const response = await this.request({
            path: `/auth/authenticate/finish`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticateVerificationInputToJSON(requestParameters.authenticateVerificationInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RootModelUserSchemaFromJSON(jsonValue));
    }

    /**
     * Verify the authenticator\'s response for authentication.
     * Verify Authentication Response
     */
    async openAPITagAUTHENTICATIONVerifyAuthenticationResponse(requestParameters: OpenAPITagAUTHENTICATIONVerifyAuthenticationResponseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootModelUserSchema> {
        const response = await this.openAPITagAUTHENTICATIONVerifyAuthenticationResponseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify a register flow.
     * Verify a register flow.
     */
    async openAPITagAUTHENTICATIONVerifyRegisterFlowRaw(requestParameters: OpenAPITagAUTHENTICATIONVerifyRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterFlowVerifyResult>> {
        if (requestParameters.registerFlowId === null || requestParameters.registerFlowId === undefined) {
            throw new runtime.RequiredError('registerFlowId','Required parameter requestParameters.registerFlowId was null or undefined when calling openAPITagAUTHENTICATIONVerifyRegisterFlow.');
        }

        if (requestParameters.registerFlowVerifyInput === null || requestParameters.registerFlowVerifyInput === undefined) {
            throw new runtime.RequiredError('registerFlowVerifyInput','Required parameter requestParameters.registerFlowVerifyInput was null or undefined when calling openAPITagAUTHENTICATIONVerifyRegisterFlow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/register/flows/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterFlowVerifyInputToJSON(requestParameters.registerFlowVerifyInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterFlowVerifyResultFromJSON(jsonValue));
    }

    /**
     * Verify a register flow.
     * Verify a register flow.
     */
    async openAPITagAUTHENTICATIONVerifyRegisterFlow(requestParameters: OpenAPITagAUTHENTICATIONVerifyRegisterFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterFlowVerifyResult> {
        const response = await this.openAPITagAUTHENTICATIONVerifyRegisterFlowRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
