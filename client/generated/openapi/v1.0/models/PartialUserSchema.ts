/* tslint:disable */
/* eslint-disable */
/**
 * Starter HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UpdatedAt } from './UpdatedAt';
import {
    UpdatedAtFromJSON,
    UpdatedAtFromJSONTyped,
    UpdatedAtToJSON,
} from './UpdatedAt';

/**
 * 
 * @export
 * @interface PartialUserSchema
 */
export interface PartialUserSchema {
    /**
     * The ID of the user.
     * @type {string}
     * @memberof PartialUserSchema
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof PartialUserSchema
     */
    email: string;
    /**
     * When the user was created.
     * @type {Date}
     * @memberof PartialUserSchema
     */
    createdAt: Date;
    /**
     * 
     * @type {UpdatedAt}
     * @memberof PartialUserSchema
     */
    updatedAt: UpdatedAt;
    /**
     * The Gravatar URL of the user.
     * @type {string}
     * @memberof PartialUserSchema
     */
    readonly avatarUrl: string;
}

/**
 * Check if a given object implements the PartialUserSchema interface.
 */
export function instanceOfPartialUserSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "avatarUrl" in value;

    return isInstance;
}

export function PartialUserSchemaFromJSON(json: any): PartialUserSchema {
    return PartialUserSchemaFromJSONTyped(json, false);
}

export function PartialUserSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): PartialUserSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'email': json['email'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': UpdatedAtFromJSON(json['updatedAt']),
        'avatarUrl': json['avatarUrl'],
    };
}

export function PartialUserSchemaToJSON(value?: PartialUserSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'email': value.email,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': UpdatedAtToJSON(value.updatedAt),
    };
}

