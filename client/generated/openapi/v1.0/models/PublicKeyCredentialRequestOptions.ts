/* tslint:disable */
/* eslint-disable */
/**
 * Starter HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Allowcredentials } from './Allowcredentials';
import {
    AllowcredentialsFromJSON,
    AllowcredentialsFromJSONTyped,
    AllowcredentialsToJSON,
} from './Allowcredentials';
import type { AuthenticatorSelectionCriteriaUserVerification } from './AuthenticatorSelectionCriteriaUserVerification';
import {
    AuthenticatorSelectionCriteriaUserVerificationFromJSON,
    AuthenticatorSelectionCriteriaUserVerificationFromJSONTyped,
    AuthenticatorSelectionCriteriaUserVerificationToJSON,
} from './AuthenticatorSelectionCriteriaUserVerification';
import type { Rpid } from './Rpid';
import {
    RpidFromJSON,
    RpidFromJSONTyped,
    RpidToJSON,
} from './Rpid';
import type { Timeout } from './Timeout';
import {
    TimeoutFromJSON,
    TimeoutFromJSONTyped,
    TimeoutToJSON,
} from './Timeout';

/**
 * 
 * @export
 * @interface PublicKeyCredentialRequestOptions
 */
export interface PublicKeyCredentialRequestOptions {
    /**
     * 
     * @type {Blob}
     * @memberof PublicKeyCredentialRequestOptions
     */
    challenge: Blob;
    /**
     * 
     * @type {Timeout}
     * @memberof PublicKeyCredentialRequestOptions
     */
    timeout?: Timeout;
    /**
     * 
     * @type {Rpid}
     * @memberof PublicKeyCredentialRequestOptions
     */
    rpId?: Rpid;
    /**
     * 
     * @type {Allowcredentials}
     * @memberof PublicKeyCredentialRequestOptions
     */
    allowCredentials?: Allowcredentials;
    /**
     * 
     * @type {AuthenticatorSelectionCriteriaUserVerification}
     * @memberof PublicKeyCredentialRequestOptions
     */
    userVerification?: AuthenticatorSelectionCriteriaUserVerification;
}

/**
 * Check if a given object implements the PublicKeyCredentialRequestOptions interface.
 */
export function instanceOfPublicKeyCredentialRequestOptions(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "challenge" in value;

    return isInstance;
}

export function PublicKeyCredentialRequestOptionsFromJSON(json: any): PublicKeyCredentialRequestOptions {
    return PublicKeyCredentialRequestOptionsFromJSONTyped(json, false);
}

export function PublicKeyCredentialRequestOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PublicKeyCredentialRequestOptions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'challenge': json['challenge'],
        'timeout': !exists(json, 'timeout') ? undefined : TimeoutFromJSON(json['timeout']),
        'rpId': !exists(json, 'rpId') ? undefined : RpidFromJSON(json['rpId']),
        'allowCredentials': !exists(json, 'allowCredentials') ? undefined : AllowcredentialsFromJSON(json['allowCredentials']),
        'userVerification': !exists(json, 'userVerification') ? undefined : AuthenticatorSelectionCriteriaUserVerificationFromJSON(json['userVerification']),
    };
}

export function PublicKeyCredentialRequestOptionsToJSON(value?: PublicKeyCredentialRequestOptions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'challenge': value.challenge,
        'timeout': TimeoutToJSON(value.timeout),
        'rpId': RpidToJSON(value.rpId),
        'allowCredentials': AllowcredentialsToJSON(value.allowCredentials),
        'userVerification': AuthenticatorSelectionCriteriaUserVerificationToJSON(value.userVerification),
    };
}

