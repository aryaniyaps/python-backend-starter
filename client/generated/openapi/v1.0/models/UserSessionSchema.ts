/* tslint:disable */
/* eslint-disable */
/**
 * Starter HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LoggedOutAt } from './LoggedOutAt';
import {
    LoggedOutAtFromJSON,
    LoggedOutAtFromJSONTyped,
    LoggedOutAtToJSON,
} from './LoggedOutAt';

/**
 * 
 * @export
 * @interface UserSessionSchema
 */
export interface UserSessionSchema {
    /**
     * The ID of the user session.
     * @type {string}
     * @memberof UserSessionSchema
     */
    id: string;
    /**
     * The IP address of the user session.
     * @type {string}
     * @memberof UserSessionSchema
     */
    ipAddress: string;
    /**
     * The location of the user session.
     * @type {string}
     * @memberof UserSessionSchema
     */
    location: string;
    /**
     * The user agent of the user session.
     * @type {string}
     * @memberof UserSessionSchema
     */
    userAgent: string;
    /**
     * 
     * @type {LoggedOutAt}
     * @memberof UserSessionSchema
     */
    loggedOutAt: LoggedOutAt;
    /**
     * When the user session was created.
     * @type {Date}
     * @memberof UserSessionSchema
     */
    createdAt: Date;
}

/**
 * Check if a given object implements the UserSessionSchema interface.
 */
export function instanceOfUserSessionSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "ipAddress" in value;
    isInstance = isInstance && "location" in value;
    isInstance = isInstance && "userAgent" in value;
    isInstance = isInstance && "loggedOutAt" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function UserSessionSchemaFromJSON(json: any): UserSessionSchema {
    return UserSessionSchemaFromJSONTyped(json, false);
}

export function UserSessionSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserSessionSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'ipAddress': json['ipAddress'],
        'location': json['location'],
        'userAgent': json['userAgent'],
        'loggedOutAt': LoggedOutAtFromJSON(json['loggedOutAt']),
        'createdAt': (new Date(json['createdAt'])),
    };
}

export function UserSessionSchemaToJSON(value?: UserSessionSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'ipAddress': value.ipAddress,
        'location': value.location,
        'userAgent': value.userAgent,
        'loggedOutAt': LoggedOutAtToJSON(value.loggedOutAt),
        'createdAt': (value.createdAt.toISOString()),
    };
}

